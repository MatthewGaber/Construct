import os
from glob import glob
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.patches import Patch

sns.set(style="whitegrid")

# ============================
# Config
# ============================
BENIGN_FOLDER = "Benign/analysis_output_benign_baseline_labelled"   
MALWARE_TYPE_DIRS = {
    # "MalwareType": "top_level_folder_with_subfolders_per_family_andthen_sample"
    "Spyware": "Spyware",
    "APT": "APT",           
    "Ransomware": "Ransomware",
    "Trojan": "Trojan",
    "Worm": "Worm",
    "Botnet": "Botnet",
    "Tool": "Tool",
}

FILENAME_TOKEN = "-with-ipinfo-"

# ----------------------------
# Loaders
# ----------------------------
def load_csvs_flat(folder_path, malware_type_label="Benign"):
    """Load CSVs in a flat folder; tag with malware_type."""
    all_files = glob(os.path.join(folder_path, "*.csv"))
    dfs = []
    for file in all_files:
        if FILENAME_TOKEN in os.path.basename(file):
            continue   # <-- skip IPinfo-enriched files
        try:
            df = pd.read_csv(file)
            df["malware_type"] = malware_type_label
            df["sample_id"] = os.path.basename(file)
            dfs.append(df)
        except Exception as e:
            print(f"[ERROR] loading {file}: {e}")
    return pd.concat(dfs, ignore_index=True) if dfs else pd.DataFrame()

def load_csvs_nested(parent_folder, malware_type_label):
    """Load CSVs under subfolders; tag with malware_type."""
    if not os.path.isdir(parent_folder):
        return pd.DataFrame()
    frames = []
    subfolders = [f.path for f in os.scandir(parent_folder) if f.is_dir()]
    for folder in subfolders:
        files = glob(os.path.join(folder, "*.csv"))
        for file in files:
            if FILENAME_TOKEN in os.path.basename(file):
                continue   # <-- skip IPinfo-enriched files
            try:
                df = pd.read_csv(file)
                df["malware_type"] = malware_type_label
                df["sample_id"] = os.path.basename(file)
                frames.append(df)
            except Exception as e:
                print(f"[ERROR] loading {file}: {e}")
    return pd.concat(frames, ignore_index=True) if frames else pd.DataFrame()

# ----------------------------
# Load Data
# ----------------------------
frames = []
# Benign baseline (flat)
if BENIGN_FOLDER and os.path.isdir(BENIGN_FOLDER):
    frames.append(load_csvs_flat(BENIGN_FOLDER, "Benign"))
# Malware types (each with nested subfolders)
for mtype, root in MALWARE_TYPE_DIRS.items():
    frames.append(load_csvs_nested(root, mtype))

df_combined = pd.concat([f for f in frames if not f.empty], ignore_index=True)
assert not df_combined.empty, "Combined data is empty"

# ----------------------------
# Normalize & Clean
# ----------------------------
columns_to_convert = [
    "byte_count", "packet_count", "inter_packet_timing_stddev",
    "uri_entropy", "session_duration", "burst_count",
    "score", "dns_entropy", "dns_sub_entropy", "domain_entropy",
]
for c in columns_to_convert:
    if c not in df_combined.columns:
        df_combined[c] = np.nan

for col in ["protocol", "app_proto", "transport"]:
    if col not in df_combined.columns:
        df_combined[col] = ""
    df_combined[col] = df_combined[col].astype(str).fillna("").str.strip().str.upper()

df_combined[columns_to_convert] = df_combined[columns_to_convert].apply(pd.to_numeric, errors="coerce")
df_combined = df_combined.dropna(subset=columns_to_convert, how="all")
df_combined["malicious"] = pd.to_numeric(df_combined.get("malicious", 0), errors="coerce").fillna(0).astype(int)

# ----------------------------
# Smart protocol label helpers
# ----------------------------
def _norm(v):
    s = str(v).strip().upper()
    return None if s in {"", "UNKNOWN", "NAN", "NONE"} else s

def make_protocol_pair(row):
    p_app = _norm(row.get("app_proto"))
    p_low = _norm(row.get("protocol"))
    if p_low == "VSSMONITORING":
        p_low = None
    parts = [x for x in (p_app, p_low) if x]
    return " | ".join(parts) if parts else "Unknown"

TRANSPORT_TOKENS = {"TCP","UDP","ICMP","SCTP","ARP","OTHER","UNKNOWN","DATA","VSSMONITORING"}
SYNONYM = {"HTTP2":"HTTP", "HTTP/2":"HTTP", "HTTP3":"HTTP/3", "QUIC":"HTTP/3"}
EXPECTED_TRANSPORT = {
    "HTTP":"TCP", "HTTPS":"TCP", "HTTP/3":"UDP", "DNS":"UDP", "MDNS":"UDP",
    "LLMNR":"UDP", "NBNS":"UDP", "SSH":"TCP", "FTP":"TCP", "FTP-DATA":"TCP",
    "FTPS":"TCP", "SMTP":"TCP", "SMTPS":"TCP", "SMTP-SUBMISSION":"TCP", "POP3":"TCP",
    "POP3S":"TCP", "IMAP":"TCP", "IMAPS":"TCP", "RDP":"TCP", "VNC":"TCP", "SMB":"TCP",
    "NTP":"UDP", "BGP":"TCP", "LDAP":"TCP", "LDAPS":"TCP", "SNMP":"UDP",
    "SNMP-TRAP":"UDP", "RTSP":"TCP", "SSDP":"UDP", "ISAKMP":"UDP", "IPSEC-NAT-T":"UDP"
}

def _presence_app(row):
    a = row.get("app_proto", "")
    p = row.get("protocol", "")
    if a in TRANSPORT_TOKENS: a = ""
    if p in TRANSPORT_TOKENS: p = ""
    cand = a if a else p
    return SYNONYM.get(cand, cand) or "UNKNOWN"

def app_with_transport_if_unusual(row):
    # Raw fields (normalized)
    ap = str(row.get("app_proto", "")).strip().upper()
    pr = str(row.get("protocol", "")).strip().upper()
    tr = str(row.get("transport", "")).strip().upper()

    app = row["presence_label_app"]
    exp = EXPECTED_TRANSPORT.get(app)

    # 0) Special protocol buckets first
    if pr in {"ICMP", "DATA"}:
        return pr

    # 1) PURE TRANSPORT "echo" cases:
    #    If both app_proto and protocol are transport tokens (or OTHER),
    #    and transport is TCP/UDP, collapse to that transport (TCP/UDP).
    if ap in TRANSPORT_TOKENS and pr in TRANSPORT_TOKENS and tr in {"TCP", "UDP"}:
        return tr

    # 2) Nothing meaningful at the app level? fall back to Unknown_{transport}
    if not app or app == "UNKNOWN":
        # If protocol gives a hint, keep it; else Unknown_{transport}/Unknown
        if pr not in {"", "UNKNOWN", "NONE", "NAN"} and pr not in TRANSPORT_TOKENS:
            return pr
        return f"Unknown_{tr}" if tr else "Unknown"

    # 3) App matches expected transport → just the app
    if exp and tr == exp:
        return app

    # 4) App over unusual transport → annotate
    if tr in {"TCP", "UDP"}:
        return f"{app} over {tr}"

    # 5) Default
    return app


df_combined["protocol_pair"] = df_combined.apply(make_protocol_pair, axis=1)
df_combined["presence_label_app"] = df_combined.apply(_presence_app, axis=1)
df_combined["presence_smart"] = df_combined.apply(app_with_transport_if_unusual, axis=1)

# Filter down to UNKNOWNs
unknown_rows = df_combined[df_combined["presence_smart"] == "UNKNOWN"]

# Top protocols among UNKNOWNs
print("\n=== Top 'protocol' values among UNKNOWN flows ===")
print(unknown_rows["protocol"].value_counts().head(20))

# Top app_proto among UNKNOWNs
print("\n=== Top 'app_proto' values among UNKNOWN flows ===")
print(unknown_rows["app_proto"].value_counts().head(20))

# (Optional) See per-malware-type breakdown
print("\n=== UNKNOWN counts by malware_type ===")
print(unknown_rows["malware_type"].value_counts())

unknown_udp = df_combined[df_combined["presence_smart"] == "Unknown_UDP"]
if unknown_udp.empty:
    print("No UNKNOWN UDP flows found; nothing to sample.")
else:
    print(unknown_udp[["protocol", "app_proto", "transport"]].sample(10))




unknown_tcp = df_combined[df_combined["presence_smart"] == "Unknown_TCP"]
if unknown_tcp.empty:
    print("No UNKNOWN TCP flows found; nothing to sample.")
else:
    print(unknown_tcp[["protocol", "app_proto", "transport"]].sample(10))
# ----------------------------
# Malware-type order (Benign first)
# ----------------------------
type_counts = df_combined.groupby("malware_type")["sample_id"].nunique().sort_values(ascending=False)
malware_type_order = ["Benign"] + [t for t in type_counts.index if t != "Benign"]

FIGSIZE = (18, 12)
BAR_WIDTH = 0.5  

# -------------------------
# PLOT 1: Avg flows per sample (single-series bars)
# -------------------------
flows_per_sample = (
    df_combined.groupby(["malware_type", "sample_id"]).size()
              .groupby("malware_type").mean()
    .reindex(malware_type_order)
).fillna(0)

x = np.arange(len(flows_per_sample))

fig1, ax1 = plt.subplots(figsize=FIGSIZE)
ax1.bar(x, flows_per_sample.values, width=BAR_WIDTH, color='orange', align='center')

ax1.set_title("Avg Flow Count per Sample (Normalized) — by Malware Type", fontsize=20)
ax1.set_ylabel("Flows per Sample", fontsize=18)
ax1.set_xlabel("Sample Type", fontsize=18)
ax1.set_xticks(x)
ax1.set_xticklabels(flows_per_sample.index, rotation=45, ha="right", fontsize=18)
ax1.tick_params(axis='y', labelsize=18)
plt.tight_layout()
plt.show()

# =========================================================
# PLOT 2: % Malicious vs Benign per Malware Type (normalized)
# =========================================================
mal_counts = df_combined.groupby(["malware_type", "sample_id", "malicious"]).size()
mal_df = mal_counts.groupby(level=[0, 2]).sum().unstack(fill_value=0)
mal_pct = (mal_df.div(mal_df.sum(axis=1), axis=0) * 100).reindex(index=malware_type_order)

mal_pct.plot(kind="bar", stacked=True, figsize=(18, 12), colormap="coolwarm")
plt.title("% of Benign vs Malicious Flows — by Malware Type", fontsize=18)
plt.ylabel("% of Flows", fontsize=18)
plt.yticks(fontsize=18) 
plt.xlabel("Sample Type", fontsize=18)
plt.xticks(rotation=45, ha="right", fontsize=18)

benign_patch = Patch(facecolor="blue", edgecolor="k", label="Benign")
malicious_patch = Patch(facecolor="red", edgecolor="k", label="Malicious")
plt.legend(handles=[benign_patch, malicious_patch],
           title="Legend",
           bbox_to_anchor=(1.02, 1),
           loc="upper left",
           fontsize=18,
           title_fontsize=18,
           handlelength=1.5,    # length of color box
           handletextpad=0.6,   # space between box and text
           labelspacing=0.4)    # vertical spacing

#plt.legend(title="Label (0=Benign flow, 1=Malicious flow)", bbox_to_anchor=(1.02, 1), loc="upper left", fontsize=18)
plt.tight_layout()
plt.show()

# =========================================================
# PLOT 3: Protocol usage — counts heatmap (rows = malware type)
# =========================================================

pp_ct = pd.crosstab(df_combined["malware_type"], df_combined["presence_smart"])
pp_ct = pp_ct.reindex(index=malware_type_order)
pp_ct = pp_ct[pp_ct.sum().sort_values(ascending=False).index]  

# ---- prints describing what's plotted ----
print("\n[PLOT 3] Heatmap data: Protocol usage — raw flow COUNTS")
print("• Each cell = number of flows (count) for that malware type with that smart protocol label")
print(f"• Rows (malware types): {list(pp_ct.index)}")
print(f"• Columns (protocol labels, ordered by total count desc): {list(pp_ct.columns)}")
print(f"• Shape: {pp_ct.shape[0]} x {pp_ct.shape[1]}")

print("\n[PLOT 3] Row totals (flows per malware type):")
print(pp_ct.sum(axis=1).to_string())

print("\n[PLOT 3] Column totals (flows per protocol label):")
print(pp_ct.sum(axis=0).to_string())

print("\n[PLOT 3] Matrix (counts):")
print(pp_ct.astype(int).to_string())




plt.figure(figsize=(max(18, 0.28 * pp_ct.shape[1]), max(12, 0.6 * pp_ct.shape[0])))
sns.heatmap(pp_ct.astype(int), annot=True, fmt="d", cmap="YlGnBu", linewidths=.5,
            cbar_kws={"label": "Flow count"})
plt.title("Protocol Usage by Malware Type — Counts (Smart Label)", fontsize=18)
plt.xlabel("Protocol", fontsize=18)
plt.xticks(fontsize=15)
plt.ylabel("Sample Type", fontsize=18)
plt.yticks(fontsize=15) 
plt.tight_layout()
plt.show()



# helper: human-readable formatter
def humanize(n):
    n = int(n)
    if n >= 1_000_000:
        return f"{n/1_000_000:.1f}M"
    if n >= 1_000:
        return f"{n/1_000:.1f}K"
    return str(n)

# build annotation matrix with shorter strings
labels = pp_ct.astype(int).applymap(humanize)

# choose figure size per number of cols/rows (tweak factors to taste)
ncols = pp_ct.shape[1]
nrows = pp_ct.shape[0]
fig_w = max(18, 0.5 * ncols)     # increase 0.5 -> wider cells per column
fig_h = max(12, 0.6 * nrows)

# annotation font size that shrinks for very large tables
max_dim = max(ncols, nrows)
annot_font = max(8, min(18, int(300 / max_dim)))  # tweak constants if needed

fig, ax = plt.subplots(figsize=(fig_w, fig_h))
sns.heatmap(pp_ct.astype(int),
            annot=labels,        # use preformatted short labels
            fmt='',              # empty because annot contains strings
            cmap="YlGnBu",
            linewidths=.5,
            cbar_kws={"label": "Flow count", "shrink": 0.6},
            ax=ax,
            annot_kws={"fontsize": annot_font, "va": "center"})

ax.set_title("Protocol Usage by Malware Type — Counts (Smart Label)", fontsize=18)
ax.set_xlabel("Protocol", fontsize=18)
ax.set_ylabel("Sample Type", fontsize=18)
ax.tick_params(axis='y', labelsize=15)
ax.set_xticklabels(ax.get_xticklabels(), ha="right", fontsize=15)

plt.tight_layout()
plt.show()



# =========================================================
# PLOT 4: Protocol usage — % within malware type heatmap
# =========================================================
pp_pct = pp_ct.div(pp_ct.sum(axis=1).replace(0, np.nan), axis=0) * 100



plt.figure(figsize=(max(18, 0.28 * pp_pct.shape[1]), max(12, 0.6 * pp_pct.shape[0])))
sns.heatmap(pp_pct.round().astype(int), annot=True, fmt="d", cmap="YlOrRd", linewidths=.5,
            cbar_kws={"label": "% of flows in malware type"})
plt.title("Protocol Usage by Malware Type — % Share (Smart Label)", fontsize=18)
plt.xlabel("Protocol", fontsize=18)
plt.xticks(fontsize=15)
plt.ylabel("Sample Type", fontsize=18)
plt.yticks(fontsize=15) 
plt.tight_layout()
plt.show()

# =========================================================
# PLOT 5: Binary presence matrix (any presence=1) — by malware type
# =========================================================
pp_ct_all = pd.crosstab(df_combined["malware_type"], df_combined["presence_smart"])
pp_bin_all = (pp_ct_all > 0).astype(int)
pp_bin_all = pp_bin_all.reindex(index=malware_type_order).fillna(0)
presence_order = pp_bin_all.sum(axis=0).sort_values(ascending=True).index
pp_bin_all = pp_bin_all[presence_order]

# ---- prints describing what's plotted ----
print("\n[PLOT 5] Heatmap data: Binary presence (1 if any flow exists for that label & malware type)")
print("• Each cell = 1 if at least one flow with that smart protocol is present for the malware type, else 0")
print(f"• Rows (malware types): {list(pp_bin_all.index)}")
print(f"• Columns (protocol labels, ordered least→most common across types): {list(pp_bin_all.columns)}")
print(f"• Shape: {pp_bin_all.shape[0]} x {pp_bin_all.shape[1]}")
print("\n[PLOT 5] Matrix (0/1 presence):")
print(pp_bin_all.to_string())

# Optional extra: per-protocol presence counts across malware types
print("\n[PLOT 5] Per-protocol presence count across malware types (column sums):")
print(pp_bin_all.sum(axis=0).to_string())



plt.figure(figsize=(max(18, 0.3 * len(presence_order)), max(12, 0.6 * len(malware_type_order))))
sns.heatmap(pp_bin_all, annot=True, fmt="d", cmap="Greys", linewidths=.5,
            cbar_kws={"label": "Presence (1=yes, 0=no)"})
plt.title("Protocol Presence by Malware Type — Smart App/Transport", fontsize=18)
plt.xlabel("Protocol", fontsize=18)
plt.xticks(fontsize=15)
plt.ylabel("Sample Type", fontsize=18)
plt.yticks(fontsize=15) 
plt.tight_layout()
plt.show()
